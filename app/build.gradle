// import org.eclipse.jgit.api.Git
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // id "nebula.release" version "19.0.10"
    id 'org.graalvm.buildtools.native' version '0.10.2'
    id 'io.freefair.lombok' version '8.6'
}

version = '0.0.1'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    // implementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'it.gzelante.App'
    applicationName = 'PCBooster'
}

graalvmNative {
    toolchainDetection = true
    binaries {
        main {
            // Set the name of the executable
            imageName.set('PCBooster')
        }
    }
}

// task determineVersion {
//     doLast {
//         repositories {
//             mavenCentral() // Add this if JGit is not already available
//         }
//         def git = new Git(dir: project.rootDir)
//         def commits = git.log().prettyFormat('%s').call()

//         // Analyze commits based on conventional commits or custom logic
//         def versionIncrement = determineIncrement(commits)

//         // Update version in build.gradle (adjust path accordingly)
//         def versionFile = new File(project.projectDir, 'build.gradle')
//         versionFile.write(versionFile.text.replace(/version = '.*'/, "version = '$versionIncrement'"))
//     }
// }

// task bumpVersion(type: Exec) {
//     commandLine 'git describe --tags --abbrev=0'
//     standardOutput = new ByteArrayOutputStream()
//     doLast {
//         def previousVersion = new String(standardOutput.toByteArray()).trim()
//         def newVersion = project.version.nextMajor() // Use project.version instead of Version class
//         version = newVersion.toString()
//     }
// }

// task commitAndTag(type: Exec) {
//     commandLine 'git', 'commit', '-m', "Bump version to ${version}"
//     commandLine 'git', 'tag', "v${version}"
// }

// task pushToGitHub(type: Exec) {
//     commandLine 'git', 'push', 'origin', "v${version}"
// }